language: objective-c
osx_image: xcode8
podfile: Example/Podfile
cache: 
  - cocoapods
env:
  global:
    - WORKSPACE="Example/GiniVision.xcworkspace"
    - IOS_FRAMEWORK_SCHEME="GiniVision-Example"
    - IOS_SDK=iphonesimulator10.0
matrix:
  include:
    - osx_image: xcode8
      env: DESTINATION="OS=8.1,name=iPhone 4S"          SCHEME="$IOS_FRAMEWORK_SCHEME"     SDK="$IOS_SDK"     RUN_TESTS="NO"      POD_LINT="YES"     BUILD_DOCS="YES"     BUILD_COVERAGE="NO"
    - osx_image: xcode8
      env: DESTINATION="OS=9.1,name=iPhone 5S"          SCHEME="$IOS_FRAMEWORK_SCHEME"     SDK="$IOS_SDK"     RUN_TESTS="NO"      POD_LINT="NO"      BUILD_DOCS="NO"      BUILD_COVERAGE="NO"
    - osx_image: xcode8
      env: DESTINATION="OS=9.3,name=iPhone 6 Plus"      SCHEME="$IOS_FRAMEWORK_SCHEME"     SDK="$IOS_SDK"     RUN_TESTS="YES"     POD_LINT="NO"      BUILD_DOCS="NO"      BUILD_COVERAGE="NO"
    - osx_image: xcode8
      env: DESTINATION="OS=10.0,name=iPhone 6S"         SCHEME="$IOS_FRAMEWORK_SCHEME"     SDK="$IOS_SDK"     RUN_TESTS="YES"     POD_LINT="NO"      BUILD_DOCS="NO"      BUILD_COVERAGE="YES"
before_install:
  - gem install slather
  - gem install cocoapods
  - pod install --project-directory=Example --repo-update
script:
  - set -o pipefail 
  - xcodebuild -version
  - xcodebuild -showsdks

  # Build in Debug and Run Tests if specified
  - if [ $RUN_TESTS == "YES" ]; then
      xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -sdk "$SDK" -destination "$DESTINATION" -configuration Debug GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES test | xcpretty -c;
    else
      xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -sdk "$SDK" -destination "$DESTINATION" -configuration Debug ONLY_ACTIVE_ARCH=NO build | xcpretty -c;
    fi

  # Run `pod lib lint` if specified
  - if [ $POD_LINT == "YES" ]; then
      pod lib lint;
    fi

after_success:
  # Build docs if specified
  - if [ $BUILD_DOCS == "YES" ]; then
      ./scripts/push-documentation.sh;
    fi

  # Create coverage report
  - if [ $BUILD_COVERAGE == "YES" ]; then
      slather && bash <(curl -s https://codecov.io/bash) -f docs/Coverage/cobertura.xml;
    fi
